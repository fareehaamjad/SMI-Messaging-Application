package com.example.securemessaging;

import java.util.ArrayList;
import java.util.List;

import android.os.Bundle;
import android.provider.ContactsContract;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.telephony.SmsManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.EditText;
import android.widget.ListView;

public class MainActivity extends Activity 
{
	private ListView mainListView ;  
	private CustomListViewAdapter listAdapter ;
	private List<RowItem> rowItems;  
    private EditText inputSearch;
    
    public static SharedPreferences s;
	public static EncryptionManager encryptionManager;
    private static DatabaseHandler dbHandler;
	    
    
    public static String private_key = "Private key";
    public static String public_key = "Public key";
    public static String HEADER_METADATA = "meta";
    public static String HEADER_REPLY_METADATA = "rep-meta";
    public static String HEADER_VERIFY_META = "verify-meta";
    
    public static String separator = "`~~`";
    
    
    public static boolean exchangeKeys = false;
	private static boolean exchangeKeysTrying = false;
    
    
	/** Called when the activity is first created. */  
	@Override  
	public void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);  
	    setContentView(R.layout.activity_main);  
	   
	    // Find the ListView resource.   
	    mainListView = (ListView) findViewById( R.id.mainListView );  
	  
	    rowItems = new ArrayList<RowItem>();
	    
	    listAdapter = new CustomListViewAdapter(this, R.layout.simplerow, rowItems);
	    inputSearch = (EditText) findViewById(R.id.inputSearch);
	    
	    readContacts();
	    // Set the ArrayAdapter as the ListView's adapter.  
	    mainListView.setAdapter( listAdapter );     
	    mainListView.setOnItemClickListener(new OnItemClickListener()
	    {
	       @Override
	       public void onItemClick(AdapterView<?> adapter, View v, int position,
	             long arg3) 
	       {
	             RowItem value = (RowItem)adapter.getItemAtPosition(position); 
	             Log.d("selected item", value.getName()+" : "+value.getNumber());
	             
	             Intent intent = new Intent(getBaseContext(), DisplayOptions.class);
	             intent.putExtra("name",value.getName());
	             intent.putExtra("number",value.getNumber());
	             startActivity(intent);
	       }
	    });
	    
	    inputSearch.addTextChangedListener(new TextWatcher() {
	        
	        @Override
	        public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) 
	        {
	            // When user changed the Text
	            //MainActivity.this.listAdapter.getFilter().filter(cs);   
	        	Log.d("*** Search value changed: " , cs.toString());
	        	listAdapter.doFilter(mainListView, cs.toString(), rowItems);
	        }
	         
	        @Override
	        public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
	                int arg3) {
	            // TODO Auto-generated method stub
	             
	        }
	         
	        @Override
	        public void afterTextChanged(Editable s) 
	        {
	        	Log.d("*** Search value changedjfjfgjfgjfgjfgj: " , s.toString());
	        	listAdapter.doFilter(mainListView, s.toString(), rowItems);                  
	        }

			
	    });
	    
	    s= getPreferences(Activity.MODE_PRIVATE);
        
        encryptionManager = new EncryptionManager( s , "testpassword");
        
        dbHandler = new DatabaseHandler(this);
        
        if (s.getString("phone_number", null) == null)
		{
			Log.i("phone number", "getting phone number from user: should only happen once!!");
			getPhoneNo();
		}
	}
	

	private void getPhoneNo() 
    {
    	Intent k = new Intent(this, GetPhoneNo.class);
        startActivity(k);
		
	}


	private void readContacts() 
	{
		ContentResolver cr = getContentResolver();
		Cursor cur = cr.query(ContactsContract.Contacts.CONTENT_URI,null, null, null, ContactsContract.Contacts.DISPLAY_NAME + " ASC");

		if (cur.getCount() > 0)
		{
			while (cur.moveToNext())
			{
				String id = cur.getString(cur.getColumnIndex(ContactsContract.Contacts._ID));
                String name = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));

             // Using the contact ID now we will get contact phone number
                Cursor cursorPhone = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                        new String[]{ContactsContract.CommonDataKinds.Phone.NUMBER},
         
                        ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = ? AND " +
                                ContactsContract.CommonDataKinds.Phone.TYPE + " = " +
                                ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE,
         
                        new String[]{id},
                        null);
         
                String contactNumber = "000";
                if (cursorPhone.moveToFirst()) {
                    contactNumber = cursorPhone.getString(cursorPhone.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                }
                //Log.i("number", name +" : " + contactNumber);
                cursorPhone.close();
         
                int image = R.drawable.ic_contact_picture;
                
                
                RowItem item = new RowItem(image, name, contactNumber);
            	rowItems.add(item);                
                
                
                
			}
		}
	}


	public static void exchangeKeys(String number) 
	{
		exchangeKeysTrying = true;
		//generating nonce
        String nonce = getNonce();

        //generating meta-data
        String metadata = getMetaData(MainActivity.HEADER_METADATA);
        
        //fetching public key and public modulus
        String publicKey = getPublicKey();
        
        //store challenge with number
        String metaD =  metadata.replace(MainActivity.HEADER_METADATA, "");
	
		Log.i("meta after replacing", metaD);
		
        String challenge = metaD + "," + nonce;
        challenge = challenge.replace(MainActivity.separator, "");
        
		
		
        String challengeNo = number;
        MainActivity.addChallenge(challengeNo, challenge);
        
        String message = metadata + publicKey + nonce;
        
        Log.i("message to send", message);
        
        sendLongSMS(message, number);
		
	}


	private static void sendLongSMS(String msg, String to) 
	{
		Log.i("long sms", msg + "    to    " + to);
		SmsManager smsManager = SmsManager.getDefault();
		ArrayList<String> parts = smsManager.divideMessage(msg); 
		smsManager.sendMultipartTextMessage(to, null, parts, null, null);
		
		//Toast.makeText(getBaseContext(), "Message Sent!", Toast.LENGTH_LONG).show();
	}


	private static void addChallenge(String no, String challenge) 
	{
		Log.i("number of the challange", no);
		Log.i("challange", challenge);
		
		dbHandler.addNewChallange(no, challenge);
		
	}



	private static String getPublicKey() 
	{
		return (MainActivity.encryptionManager.s.getString(MainActivity.public_key, null)+MainActivity.separator);
	}


	private static String getMetaData(String header) 
	{
		//phone No:
		String metadata = header;
        metadata += MainActivity.separator;
        metadata += MainActivity.s.getString("phone_number", null);
        metadata += "--";
        
        //location
        if(MainActivity.mGPS.canGetLocation )
        {
        	double mLat = MainActivity.mGPS.getLatitude();
        	double mLong = MainActivity.mGPS.getLongitude();
        	
        	metadata += Double.toString(mLat);
        	metadata += ":";
        	metadata += Double.toString(mLong);
        	metadata += "--";
        }
        else
        {
        	Log.e("Location", "can't get the location");
        }
        
        //DateTime
        final Calendar c = Calendar.getInstance();
        int mYear = c.get(Calendar.YEAR);
        int mMonth = c.get(Calendar.MONTH);
        int mDay = c.get(Calendar.DAY_OF_MONTH);
        metadata += mDay+"-"+mMonth+"-"+mYear;
        metadata += ":";
        
        Time time = new Time();
        time.setToNow();
        metadata += time.hour+":"+time.minute;
        metadata += MainActivity.separator;
		
       
        
        return metadata;
	}


	private static String getNonce() 
	{
		SecureRandom sr = new SecureRandom();
        byte[] _nonce = new byte[1024/8];
        sr.nextBytes(_nonce);
        
		return (_nonce.toString() + MainActivity.separator);
	}


	
} 


